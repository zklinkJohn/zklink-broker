/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { ZkLink, ZkLinkInterface } from "../../../contracts/test/ZkLink";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "acceptor",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "accountId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "tokenId",
        type: "uint16",
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint16",
        name: "withdrawFeeRate",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "accountIdOfNonce",
        type: "uint32",
      },
      {
        internalType: "uint8",
        name: "subAccountIdOfNonce",
        type: "uint8",
      },
      {
        internalType: "uint32",
        name: "nonce",
        type: "uint32",
      },
      {
        internalType: "uint128",
        name: "amountTransfer",
        type: "uint128",
      },
    ],
    name: "acceptERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "acceptor",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "accountId",
        type: "uint32",
      },
      {
        internalType: "address payable",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint16",
        name: "withdrawFeeRate",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "accountIdOfNonce",
        type: "uint32",
      },
      {
        internalType: "uint8",
        name: "subAccountIdOfNonce",
        type: "uint8",
      },
      {
        internalType: "uint32",
        name: "nonce",
        type: "uint32",
      },
    ],
    name: "acceptETH",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "tokenId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "acceptor",
        type: "address",
      },
      {
        internalType: "address",
        name: "broker",
        type: "address",
      },
    ],
    name: "brokerAllowance",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "tokenId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "broker",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
    ],
    name: "brokerApprove",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint104",
        name: "_amount",
        type: "uint104",
      },
      {
        internalType: "bytes32",
        name: "_zkLinkAddress",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "_subAccountId",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "_mapping",
        type: "bool",
      },
    ],
    name: "depositERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_zkLinkAddress",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "_subAccountId",
        type: "uint8",
      },
    ],
    name: "depositETH",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "blockNumber",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "priorityOperations",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "pendingOnchainOperationsHash",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "stateHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "commitment",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "syncHash",
            type: "bytes32",
          },
        ],
        internalType: "struct IZkLink.StoredBlockInfo",
        name: "block",
        type: "tuple",
      },
    ],
    name: "getSynchronizedProgress",
    outputs: [
      {
        internalType: "uint256",
        name: "progress",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "syncHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "progress",
        type: "uint256",
      },
    ],
    name: "receiveSynchronizationProgress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "tokenIds",
    outputs: [
      {
        internalType: "uint16",
        name: "tokenId",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_tokenId",
        type: "uint16",
      },
      {
        internalType: "uint128",
        name: "_amount",
        type: "uint128",
      },
    ],
    name: "withdrawPendingBalance",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610431908161001c8239f35b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c9081630151284114610345575080632f25807e146103115780632fbb58ba146102765780636012ed2d146102045780637648ce45146101ea578063862a85b214610194578063b69d5a6914610181578063dce05ff4146100e8578063f6133282146100b85763fc97a3031461009057600080fd5b346100b45760203660031901126100b457906020916100ad6103a6565b5051908152f35b5080fd5b50346100b45760603660031901126100b457906020916100d661037a565b506100df610390565b506100ad6103bc565b823461017a5761014036600319011261017a576101036103a6565b5061010c6103e8565b506101156103bc565b5061ffff606435818116036100b4576001600160801b03906084358281160361017d5760a435908116036100b45763ffffffff60c4358181160361017d5760e43560ff81160361017d5761010435908116036100b457610124359081160361017a5780f35b80fd5b8280fd5b50346100b45736600319011261017a5780f35b823461017a5760a036600319011261017a576004356001600160a01b0381160361017a576024356cffffffffffffffffffffffffff81160361017a5760643560ff81160361017a576084358015150361017a5780f35b5036600319011261017a5760243560ff81160361017a5780f35b8261010036600319011261017a5761021a6103a6565b506102236103e8565b5061022c6103bc565b506064356001600160801b0381160361017a5760843561ffff81160361017a5763ffffffff60a435818116036100b45760c43560ff8116036100b45760e4359081160361017a5780f35b50903461017a5760e036600319011261017a57815167ffffffffffffffff929060e08101848111828210176102fd57825260043563ffffffff811681036102f9578152602435938416840361017d5760209384820152604435828201526064356060820152608435608082015260a43560a082015260c060c43591015251908152f35b8380fd5b634e487b7160e01b84526041600452602484fd5b50346100b45760603660031901126100b45761032b6103a6565b5060243561ffff8116036100b457906020916100ad6103d2565b8390346100b45760603660031901126100b45760209161036361037a565b5061036c610390565b506103756103d2565b508152f35b6004359061ffff8216820361038b57565b600080fd5b602435906001600160a01b038216820361038b57565b600435906001600160a01b038216820361038b57565b604435906001600160a01b038216820361038b57565b604435906001600160801b038216820361038b57565b6024359063ffffffff8216820361038b5756fea2646970667358221220d795355a667dd1700e7c579e9de1fd9c085c2cdf895457a5d7ea898acf218a5364736f6c63430008120033";

type ZkLinkConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZkLinkConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZkLink__factory extends ContractFactory {
  constructor(...args: ZkLinkConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ZkLink & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ZkLink__factory {
    return super.connect(runner) as ZkLink__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZkLinkInterface {
    return new Interface(_abi) as ZkLinkInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ZkLink {
    return new Contract(address, _abi, runner) as unknown as ZkLink;
  }
}
