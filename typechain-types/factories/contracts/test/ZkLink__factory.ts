/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { ZkLink, ZkLinkInterface } from "../../../contracts/test/ZkLink";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
    ],
    name: "Accept",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "acceptor",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "accountId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "tokenId",
        type: "uint16",
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint16",
        name: "withdrawFeeRate",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "accountIdOfNonce",
        type: "uint32",
      },
      {
        internalType: "uint8",
        name: "subAccountIdOfNonce",
        type: "uint8",
      },
      {
        internalType: "uint32",
        name: "nonce",
        type: "uint32",
      },
      {
        internalType: "uint128",
        name: "amountTransfer",
        type: "uint128",
      },
    ],
    name: "acceptERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "acceptor",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "accountId",
        type: "uint32",
      },
      {
        internalType: "address payable",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint16",
        name: "withdrawFeeRate",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "accountIdOfNonce",
        type: "uint32",
      },
      {
        internalType: "uint8",
        name: "subAccountIdOfNonce",
        type: "uint8",
      },
      {
        internalType: "uint32",
        name: "nonce",
        type: "uint32",
      },
    ],
    name: "acceptETH",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "tokenId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "acceptor",
        type: "address",
      },
      {
        internalType: "address",
        name: "broker",
        type: "address",
      },
    ],
    name: "brokerAllowance",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "tokenId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "broker",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
    ],
    name: "brokerApprove",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint104",
        name: "_amount",
        type: "uint104",
      },
      {
        internalType: "bytes32",
        name: "_zkLinkAddress",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "_subAccountId",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "_mapping",
        type: "bool",
      },
    ],
    name: "depositERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_zkLinkAddress",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "_subAccountId",
        type: "uint8",
      },
    ],
    name: "depositETH",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "blockNumber",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "priorityOperations",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "pendingOnchainOperationsHash",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "stateHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "commitment",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "syncHash",
            type: "bytes32",
          },
        ],
        internalType: "struct IZkLink.StoredBlockInfo",
        name: "block",
        type: "tuple",
      },
    ],
    name: "getSynchronizedProgress",
    outputs: [
      {
        internalType: "uint256",
        name: "progress",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "syncHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "progress",
        type: "uint256",
      },
    ],
    name: "receiveSynchronizationProgress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "tokenId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setTokenId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    name: "tokenIdMap",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "tokenIds",
    outputs: [
      {
        internalType: "uint16",
        name: "tokenId",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_tokenId",
        type: "uint16",
      },
      {
        internalType: "uint128",
        name: "_amount",
        type: "uint128",
      },
    ],
    name: "withdrawPendingBalance",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761077e908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826301512841146105d45750816316838723146105985781632f25807e146105635781632fbb58ba146104cc5781636012ed2d146103a05781637648ce4514610385578163862a85b214610330578163b69d5a6914610319578163bfe130c8146102c8578163dce05ff41461010157508063f6133282146100d15763fc97a303146100a957600080fd5b346100cd5760203660031901126100cd57906020916100c6610635565b5051908152f35b5080fd5b50346100cd5760603660031901126100cd57906020916100ef610609565b506100f861061f565b506100c661064b565b919050346102c4576101403660031901126102c45761011e610635565b6101266106af565b5061012f61064b565b916064359261ffff92838516809503610275576001600160801b039360843585811681036102c05760a4359180831683036102b85763ffffffff60c435818116036102bc5760e43560ff8116036102bc5761010435908116036102b857610124359687168097036102b8576101a66101ad936106c2565b16906106ec565b506001600160a01b03908116943386900361028a57875260208092888252606483868b205416988a875195869485936323b872dd60e01b85523390850152169a8b60248401528960448401525af180156102805761023e575b50907f1eee3b796a71846bc3ed7e00d27c4ca13b6113c00dcac278ebd7a26df86225d19460609493928251948552840152820152a180f35b818181969594933d8311610279575b6102578183610677565b810103126102755751801515036102715790919238610206565b8580fd5b8680fd5b503d61024d565b83513d89823e3d90fd5b835162461bcd60e51b8152602081890152600860248201526736bab9ba1032b89960c11b6044820152606490fd5b8980fd5b8a80fd5b8880fd5b8280fd5b5050346100cd57806003193601126100cd576102e2610609565b9061ffff6102ee61061f565b921683526020839052822080546001600160a01b0319166001600160a01b0390921691909117905580f35b5050346100cd5736600319011261032d5780f35b80fd5b8390346100cd5760a03660031901126100cd57356001600160a01b0381160361032d576024356cffffffffffffffffffffffffff81160361032d5760643560ff81160361032d576084358015150361032d5780f35b505036600319011261032d5760243560ff81160361032d5780f35b83836101003660031901126100cd576103b7610635565b6103bf6106af565b506103c861064b565b906001600160801b03606435818116908181036102755761ffff60843581811681036102c05763ffffffff60a435818116036102b85760c43560ff8116036102b85760e435908116036102c0576104288593612710936101a686946106c2565b160416948582106104a0575084811161045b575b8580808080896001600160a01b038a165af150610457610708565b5080f35b84900381811161048d5785808080809a508098959681989597829816905af150610483610708565b509281945061043c565b634e487b7160e01b865260118752602486fd5b5162461bcd60e51b815260208189015260076024820152661b5d5cdd0819dd60ca1b6044820152606490fd5b8383346100cd5760e03660031901126100cd57805167ffffffffffffffff9360e08201858111838210176105505783523563ffffffff8116810361054c57815260243593841684036102c45760209384820152604435828201526064356060820152608435608082015260a43560a082015260c060c43591015251908152f35b8380fd5b634e487b7160e01b855260418252602485fd5b5050346100cd5760603660031901126100cd5761057e610635565b5060243561ffff8116036100cd57906020916100c6610661565b5050346100cd5760203660031901126100cd5760209161ffff6105b9610609565b1681528083528190205490516001600160a01b039091168152f35b8490346100cd5760603660031901126100cd576020916105f2610609565b506105fb61061f565b50610604610661565b508152f35b6004359061ffff8216820361061a57565b600080fd5b602435906001600160a01b038216820361061a57565b600435906001600160a01b038216820361061a57565b604435906001600160a01b038216820361061a57565b604435906001600160801b038216820361061a57565b90601f8019910116810190811067ffffffffffffffff82111761069957604052565b634e487b7160e01b600052604160045260246000fd5b6024359063ffffffff8216820361061a57565b9061ffff809216612710039182116106d657565b634e487b7160e01b600052601160045260246000fd5b6001600160801b0391821690821602908116919082036106d657565b3d15610743573d9067ffffffffffffffff82116106995760405191610737601f8201601f191660200184610677565b82523d6000602084013e565b60609056fea2646970667358221220f2842e9c15c34985e9604a66a4e3c3b131176ed9c31a4a0975608faaac6a623f64736f6c63430008120033";

type ZkLinkConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZkLinkConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZkLink__factory extends ContractFactory {
  constructor(...args: ZkLinkConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ZkLink & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ZkLink__factory {
    return super.connect(runner) as ZkLink__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZkLinkInterface {
    return new Interface(_abi) as ZkLinkInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ZkLink {
    return new Contract(address, _abi, runner) as unknown as ZkLink;
  }
}
