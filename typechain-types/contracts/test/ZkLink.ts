/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IZkLink {
  export type StoredBlockInfoStruct = {
    blockNumber: BigNumberish;
    priorityOperations: BigNumberish;
    pendingOnchainOperationsHash: BytesLike;
    timestamp: BigNumberish;
    stateHash: BytesLike;
    commitment: BytesLike;
    syncHash: BytesLike;
  };

  export type StoredBlockInfoStructOutput = [
    blockNumber: bigint,
    priorityOperations: bigint,
    pendingOnchainOperationsHash: string,
    timestamp: bigint,
    stateHash: string,
    commitment: string,
    syncHash: string
  ] & {
    blockNumber: bigint;
    priorityOperations: bigint;
    pendingOnchainOperationsHash: string;
    timestamp: bigint;
    stateHash: string;
    commitment: string;
    syncHash: string;
  };
}

export interface ZkLinkInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptERC20"
      | "acceptETH"
      | "brokerAllowance"
      | "brokerApprove"
      | "depositERC20"
      | "depositETH"
      | "getSynchronizedProgress"
      | "receiveSynchronizationProgress"
      | "setTokenId"
      | "tokenIdMap"
      | "tokenIds"
      | "withdrawPendingBalance"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Accept"): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptERC20",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptETH",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "brokerAllowance",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "brokerApprove",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSynchronizedProgress",
    values: [IZkLink.StoredBlockInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveSynchronizationProgress",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenId",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPendingBalance",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acceptETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "brokerAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "brokerApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSynchronizedProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveSynchronizationProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenIdMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPendingBalance",
    data: BytesLike
  ): Result;
}

export namespace AcceptEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZkLink extends BaseContract {
  connect(runner?: ContractRunner | null): ZkLink;
  waitForDeployment(): Promise<this>;

  interface: ZkLinkInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptERC20: TypedContractMethod<
    [
      acceptor: AddressLike,
      accountId: BigNumberish,
      receiver: AddressLike,
      tokenId: BigNumberish,
      amount: BigNumberish,
      withdrawFeeRate: BigNumberish,
      accountIdOfNonce: BigNumberish,
      subAccountIdOfNonce: BigNumberish,
      nonce: BigNumberish,
      amountTransfer: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  acceptETH: TypedContractMethod<
    [
      acceptor: AddressLike,
      accountId: BigNumberish,
      receiver: AddressLike,
      amount: BigNumberish,
      withdrawFeeRate: BigNumberish,
      accountIdOfNonce: BigNumberish,
      subAccountIdOfNonce: BigNumberish,
      nonce: BigNumberish
    ],
    [void],
    "payable"
  >;

  brokerAllowance: TypedContractMethod<
    [tokenId: BigNumberish, acceptor: AddressLike, broker: AddressLike],
    [bigint],
    "view"
  >;

  brokerApprove: TypedContractMethod<
    [tokenId: BigNumberish, broker: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  depositERC20: TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _zkLinkAddress: BytesLike,
      _subAccountId: BigNumberish,
      _mapping: boolean
    ],
    [void],
    "nonpayable"
  >;

  depositETH: TypedContractMethod<
    [_zkLinkAddress: BytesLike, _subAccountId: BigNumberish],
    [void],
    "payable"
  >;

  getSynchronizedProgress: TypedContractMethod<
    [block: IZkLink.StoredBlockInfoStruct],
    [bigint],
    "view"
  >;

  receiveSynchronizationProgress: TypedContractMethod<
    [syncHash: BytesLike, progress: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenId: TypedContractMethod<
    [tokenId: BigNumberish, addr: AddressLike],
    [void],
    "nonpayable"
  >;

  tokenIdMap: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  tokenIds: TypedContractMethod<[tokenAddress: AddressLike], [bigint], "view">;

  withdrawPendingBalance: TypedContractMethod<
    [_owner: AddressLike, _tokenId: BigNumberish, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptERC20"
  ): TypedContractMethod<
    [
      acceptor: AddressLike,
      accountId: BigNumberish,
      receiver: AddressLike,
      tokenId: BigNumberish,
      amount: BigNumberish,
      withdrawFeeRate: BigNumberish,
      accountIdOfNonce: BigNumberish,
      subAccountIdOfNonce: BigNumberish,
      nonce: BigNumberish,
      amountTransfer: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "acceptETH"
  ): TypedContractMethod<
    [
      acceptor: AddressLike,
      accountId: BigNumberish,
      receiver: AddressLike,
      amount: BigNumberish,
      withdrawFeeRate: BigNumberish,
      accountIdOfNonce: BigNumberish,
      subAccountIdOfNonce: BigNumberish,
      nonce: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "brokerAllowance"
  ): TypedContractMethod<
    [tokenId: BigNumberish, acceptor: AddressLike, broker: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "brokerApprove"
  ): TypedContractMethod<
    [tokenId: BigNumberish, broker: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositERC20"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _zkLinkAddress: BytesLike,
      _subAccountId: BigNumberish,
      _mapping: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositETH"
  ): TypedContractMethod<
    [_zkLinkAddress: BytesLike, _subAccountId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getSynchronizedProgress"
  ): TypedContractMethod<
    [block: IZkLink.StoredBlockInfoStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "receiveSynchronizationProgress"
  ): TypedContractMethod<
    [syncHash: BytesLike, progress: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenId"
  ): TypedContractMethod<
    [tokenId: BigNumberish, addr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenIdMap"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenIds"
  ): TypedContractMethod<[tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawPendingBalance"
  ): TypedContractMethod<
    [_owner: AddressLike, _tokenId: BigNumberish, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Accept"
  ): TypedContractEvent<
    AcceptEvent.InputTuple,
    AcceptEvent.OutputTuple,
    AcceptEvent.OutputObject
  >;

  filters: {
    "Accept(address,address,uint128)": TypedContractEvent<
      AcceptEvent.InputTuple,
      AcceptEvent.OutputTuple,
      AcceptEvent.OutputObject
    >;
    Accept: TypedContractEvent<
      AcceptEvent.InputTuple,
      AcceptEvent.OutputTuple,
      AcceptEvent.OutputObject
    >;
  };
}
